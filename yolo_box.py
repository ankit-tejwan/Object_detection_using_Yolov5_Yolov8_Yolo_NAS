#####################################################################################
# This script will download all Yolo detection model 
#####################################################################################
import numpy as np
import cv2
from ultralytics import YOLO

class YOLOSegmentation:
    def __init__(self, model_path):
        # Load YOLO model
        self.model = YOLO(model_path)

    def detect(self, img):
        # Predict and return results from YOLO model
        results = self.model.predict(source=img.copy(), iou=0.1, retina_masks=True, conf=0.5)
        return results

def generate_color(class_id, max_classes=256):
    """
    Generate a unique color based on the class ID.
    The color is generated by varying the Hue value in the HSV color space.
    """
    hue = int((class_id * 179) / max_classes)  # Ensure unique hues for up to max_classes
    saturation = 255  # Maximum saturation
    value = 255  # Maximum brightness
    color = cv2.cvtColor(np.array([[[hue, saturation, value]]], dtype=np.uint8), cv2.COLOR_HSV2BGR)[0][0]
    return tuple(int(x) for x in color)
# Initialize YOLO model with yolov8s.pt
ys = YOLOSegmentation("yolov8s.pt")


# Capture video from the webcam (0 is the default webcam)
cap = cv2.VideoCapture(0)

# Check if the webcam opened successfully
if not cap.isOpened():
    print("Error: Could not open webcam.")
else:
    while True:
        # Capture frame-by-frame
        ret, img = cap.read()
        # img dimensions
        img_height, img_width = img.shape[:2]
        # Print image dimensions
        print(f"Image dimensions: {img_height} x {img_width}")
        if not ret:
            break

        # Detect objects in the frame
        results = ys.detect(img)

        # Iterate over each result (detected object)
        for result in results:
            # Extract bounding boxes and class IDs from the result
            boxes = result.boxes.xyxy  # x1, y1, x2, y2 bounding boxes
            class_ids = result.boxes.cls.tolist()  # Class IDs
            confidence = result.boxes.conf.tolist()  # Confidence scores
            
            for i in range(len(boxes)):
                box = boxes[i]
                class_id = class_ids[i]
                color = generate_color(class_id)
                classes = ys.model.names
                # Get the class name and draw it on the bounding box
                class_name = classes[int(class_id)] if int(class_id) < len(classes) else "Unknown"

                # Draw bounding box around the detected object
                x1, y1, x2, y2 = map(int, box)  # Convert coordinates to integers
                cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
                label = f"{class_name} {confidence[i]:.2f}"
                # print label, confidence
                print(label)
                # Draw class name on the bounding box
                cv2.putText(img, label, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5,color, 2)

        # Display the resulting frame
        cv2.imshow("YOLO Object Detection", img)

        # Break the loop if the 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release the webcam and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()

